import os
import shutil
import tempfile
import streamlit as st
import openai
import whisper
import torch
import imageio_ffmpeg as ffmpeg
import time

# ==========================================
# Garante que o Whisper encontre o ffmpeg
# ==========================================
ffmpeg_path = ffmpeg.get_ffmpeg_exe()
shutil.copy(ffmpeg_path, "/tmp/ffmpeg")  # cria um bin√°rio no /tmp
os.environ["PATH"] = "/tmp:" + os.environ["PATH"]


# ==========================================
# Fun√ß√µes auxiliares
# ==========================================

def transcribe_whisper_api(audio_path: str, api_key: str):
    """Transcreve com Whisper API da OpenAI."""
    openai.api_key = api_key
    try:
        with open(audio_path, "rb") as f:
            transcript = openai.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                response_format="text"
            )
        return transcript
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Falha na API da OpenAI. Usando Whisper Local. Erro: {e}")
        return None


def transcribe_whisper_local(audio_path: str):
    """Transcreve com Whisper rodando localmente."""
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = whisper.load_model("base", device=device)
    result = model.transcribe(audio_path)
    return result["text"]


def gerar_roteiro(transcricao: str, api_key: str):
    """Gera o roteiro final no formato viral."""
    openai.api_key = api_key

    prompt = f"""
Voc√™ √© um roteirista especialista em v√≠deos virais. 
Sua miss√£o √© transformar a transcri√ß√£o abaixo em um roteiro no formato viral.

‚ö†Ô∏è Regras obrigat√≥rias:
1. Cada bloco (gancho, contexto/questionamento, altern√¢ncia de opostos, resposta inesperada, opini√£o final, CTA) deve conter pelo menos **uma hist√≥ria real da transcri√ß√£o**, reescrita de forma impactante e envolvente.
2. N√£o invente fatos. Use nomes, eventos, datas e hist√≥rias reais da transcri√ß√£o. Se algo n√£o estiver claro, reescreva criativamente mas sem criar fatos novos.
3. Mantenha a estrutura **fixa**:
   - Gancho inicial (com impacto e curiosidade)
   - Contexto/questionamento (incluindo pelo menos 1 hist√≥ria real da transcri√ß√£o)
   - Altern√¢ncia de opostos (cr√≠ticas vs conquistas, fracassos vs vit√≥rias ‚Äî com base no que ocorreu no v√≠deo)
   - Resposta inesperada (a reviravolta ou li√ß√£o mais surpreendente ‚Äî baseada no v√≠deo)
   - Opini√£o final (li√ß√£o inspiradora ou conclus√£o)
   - CTA (convite para engajamento ou pr√≥xima a√ß√£o)
4. Al√©m do roteiro, gere tamb√©m:
   - T√≠tulo chamativo
   - Ideia de Thumb (imagem + texto)
   - Sugest√µes para Shorts (3 ideias)
   - Sugest√µes de edi√ß√£o (3 ideias, incluindo cortes e efeitos)

Transcri√ß√£o original:
\"\"\"{transcricao}\"\"\"
"""

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )

    return response.choices[0].message.content


# ==========================================
# Streamlit App
# ==========================================

st.title("üé¨ Agente de Roteiros Virais")
st.write("Fa√ßa upload de um v√≠deo ou √°udio para gerar um roteiro no formato viral.")

api_key = st.text_input("üîë Digite sua chave da OpenAI:", type="password")
uploaded_file = st.file_uploader("üì§ Upload de arquivo de v√≠deo/√°udio", type=["mp4", "mp3", "wav", "m4a"])

if st.button("Gerar Roteiro"):
    if not api_key:
        st.error("Por favor, insira sua chave da OpenAI.")
    elif uploaded_file is None:
        st.error("Por favor, fa√ßa upload de um v√≠deo ou √°udio.")
    else:
        # Salva o arquivo tempor√°rio
        st.info("üì§ Preparando arquivo enviado...")
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        temp_file.write(uploaded_file.read())
        audio_path = temp_file.name

        # Barra de progresso para transcri√ß√£o
        progress_text = "üéôÔ∏è Transcrevendo √°udio..."
        progress_bar = st.progress(0, text=progress_text)

        transcript = transcribe_whisper_api(audio_path, api_key)
        progress_bar.progress(50, text="‚ö° Processando com Whisper...")

        if not transcript:
            transcript = transcribe_whisper_local(audio_path)

        progress_bar.progress(100, text="‚úÖ Transcri√ß√£o conclu√≠da!")

        if transcript:
            # Barra de progresso para gera√ß√£o do roteiro
            roteiro_bar = st.progress(0, text="üìù Criando roteiro viral...")
            time.sleep(1)
            roteiro_bar.progress(30, text="üîç Analisando transcri√ß√£o...")
            time.sleep(1)
            roteiro_bar.progress(60, text="üéØ Estruturando roteiro...")
            time.sleep(1)

            roteiro = gerar_roteiro(transcript, api_key)
            roteiro_bar.progress(100, text="‚úÖ Roteiro gerado com sucesso!")

            # Exibe resultados
            st.markdown("### üìú Transcri√ß√£o")
            st.write(transcript)

            st.markdown("### üéØ Roteiro Viral")
            st.write(roteiro)
        else:
            st.error("‚ùå N√£o foi poss√≠vel transcrever o v√≠deo.")
