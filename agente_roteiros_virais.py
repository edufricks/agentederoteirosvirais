import os
import shutil
import streamlit as st
import tempfile
import openai
import whisper
import torch
import imageio_ffmpeg as ffmpeg

# ==========================================
# Garante que o Whisper encontre o ffmpeg
# ==========================================
ffmpeg_path = ffmpeg.get_ffmpeg_exe()
shutil.copy(ffmpeg_path, "/tmp/ffmpeg")  # cria um bin√°rio no /tmp
os.environ["PATH"] = "/tmp:" + os.environ["PATH"]

# ==========================================
# Fun√ß√µes auxiliares
# ==========================================

def transcribe_whisper_api(audio_path: str, api_key: str):
    """Transcreve com Whisper API da OpenAI."""
    openai.api_key = api_key
    try:
        with open(audio_path, "rb") as f:
            transcript = openai.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                response_format="text"
            )
        return transcript
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Falha na API da OpenAI. Usando Whisper Local. Erro: {e}")
        return None


def transcribe_whisper_local(audio_path: str):
    """Transcreve com Whisper rodando localmente."""
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model = whisper.load_model("base", device=device)
    result = model.transcribe(audio_path)
    return result["text"]


def gerar_roteiro(transcricao: str, api_key: str):
    """Gera o roteiro final no formato viral respeitando a cronologia."""
    openai.api_key = api_key

    prompt = f"""
Voc√™ √© um roteirista especialista em v√≠deos virais.
Sua miss√£o √© transformar a transcri√ß√£o abaixo em um roteiro no formato viral **respeitando a ordem cronol√≥gica dos fatos**.

‚ö†Ô∏è Regras obrigat√≥rias:
1. N√£o descarte nenhuma hist√≥ria. Todas as hist√≥rias reais da transcri√ß√£o devem aparecer no roteiro.
2. Use frases curtas, indaga√ß√µes e pausas estrat√©gicas para prender aten√ß√£o.
3. Estrutura obrigat√≥ria:

In√≠cio:
   - 5 segundos iniciais que reflitam a thumb (impacto + curiosidade)
   - At√© 30 segundos de contexto e questionamento

Meio (pode conter infinitos blocos at√© cobrir todas as hist√≥rias):
   - Bloco de at√© 90 segundos:
        1. Revezar entre momentos opostos (ex.: fracasso vs conquista, dor vs supera√ß√£o), sempre baseados em hist√≥rias reais da transcri√ß√£o.
        2. Responder superando expectativas (a reviravolta ou li√ß√£o mais surpreendente daquele trecho).
   - Continue criando novos blocos at√© cobrir todas as hist√≥rias da transcri√ß√£o, sempre respeitando a ordem cronol√≥gica.

Fim:
   - Recompensa final: opini√£o inspiradora sobre a jornada
   - Fechamento pedindo para seguir e curtir (CTA)

4. Al√©m do roteiro, entregue tamb√©m:
   - T√≠tulo chamativo
   - Ideia de Thumb (imagem + texto)
   - Sugest√µes para Shorts (3 ideias)
   - Sugest√µes de edi√ß√£o (3 ideias, incluindo cortes e efeitos)

Transcri√ß√£o original:
\"\"\"{transcricao}\"\"\"
"""

    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )

    return response.choices[0].message.content


# ==========================================
# Streamlit App
# ==========================================

st.title("üé¨ Agente de Roteiros Virais")
st.write("Fa√ßa upload de um v√≠deo ou √°udio para gerar um roteiro no formato viral.")

api_key = st.text_input("üîë Digite sua chave da OpenAI:", type="password")
uploaded_file = st.file_uploader("üì§ Upload de v√≠deo/√°udio", type=["mp4", "mp3", "wav", "m4a"])

if st.button("Gerar Roteiro"):
    if not api_key:
        st.error("Por favor, insira sua chave da OpenAI.")
    else:
        transcript = None
        audio_path = None

        if uploaded_file is not None:
            st.info("üì§ Usando arquivo enviado pelo usu√°rio...")
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
            temp_file.write(uploaded_file.read())
            audio_path = temp_file.name

        if audio_path:
            progress_bar = st.progress(0)
            with st.spinner("üéôÔ∏è Transcrevendo √°udio..."):
                transcript = transcribe_whisper_api(audio_path, api_key)
                progress_bar.progress(50)
                if not transcript:
                    transcript = transcribe_whisper_local(audio_path)

            if transcript:
                with st.spinner("üìù Gerando roteiro..."):
                    roteiro = gerar_roteiro(transcript, api_key)
                    progress_bar.progress(100)

                st.success("‚úÖ Roteiro gerado com sucesso!")
                st.markdown("### üìú Transcri√ß√£o")
                st.write(transcript)

                st.markdown("### üéØ Roteiro Viral")
                st.write(roteiro)
            else:
                st.error("‚ùå N√£o foi poss√≠vel obter transcri√ß√£o do v√≠deo.")
